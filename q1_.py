# -*- coding: utf-8 -*-
"""Q1_Zeta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zlHWoKc6c1YhhaYgWMtv8qogB2tomsT-
"""

pip install Flask openai

from openai import OpenAI
import time

# Initialize the OpenAI client
client = OpenAI(api_key="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")
 # Replace with your actual API key

try:
    # Attempt to create a chat completion
    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",  # Use a lower-cost model if needed
        messages=[
            {"role": "user", "content": "Write a haiku about AI"}
        ]
    )
    # Print the response
    print(completion.choices[0].message.content)

except openai.RateLimitError as e:
    # Handle rate limit errors
    print(f"Rate limit exceeded. Please wait and try again. Error: {e}")
    time.sleep(60)  # Wait for 60 seconds before retrying

except openai.APIError as e:
    # Handle other API errors
    print(f"OpenAI API error: {e}")

except Exception as e:
    # Handle any other exceptions
    print(f"An unexpected error occurred: {e}")

from flask import Flask, request, jsonify
import openai

app = Flask(__name__)

# Set your OpenAI API key
openai.api_key = "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"

# Mock function to classify disputes using GPT
def classify_dispute(dispute_text):
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=f"Classify the following dispute into categories like fraud, billing error, or other: {dispute_text}",
        max_tokens=10
    )
    return response.choices[0].text.strip()

# Mock function to assign priority
def assign_priority(customer_id):
    # Example logic: High-value customers get higher priority
    if customer_id.startswith("VIP"):
        return "High"
    return "Medium"

@app.route('/classify-dispute', methods=['POST'])
def handle_dispute():
    data = request.json
    dispute_text = data.get('dispute_text')
    customer_id = data.get('customer_id')

    # Classify dispute using GPT
    category = classify_dispute(dispute_text)
    priority = assign_priority(customer_id)

    # Determine action based on category
    if category == "fraud":
        action = "Escalate to fraud team"
    elif category == "billing error":
        action = "Route to billing team"
    else:
        action = "Route to general support"

    # Return response to Zapier
    return jsonify({
        "category": category,
        "priority": priority,
        "action": action
    })

if __name__ == '__main__':
    app.run(debug=True)