# -*- coding: utf-8 -*-
"""Q3_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zlHWoKc6c1YhhaYgWMtv8qogB2tomsT-
"""

pip install Flask openai

!pip install fastapi uvicorn

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import sqlite3

app = FastAPI()

conn = sqlite3.connect('bank.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS accounts (
    account_id TEXT PRIMARY KEY,
    balance REAL NOT NULL
)
''')
conn.commit()

class DebitRequest(BaseModel):
    account_id: str
    amount: float

@app.post('/debit')
def debit_account(request: DebitRequest):
    account_id = request.account_id
    amount = request.amount

    try:
        cursor.execute("BEGIN TRANSACTION")
        cursor.execute("SELECT balance FROM accounts WHERE account_id = ?", (account_id,))
        row = cursor.fetchone()
        if not row:
            raise HTTPException(status_code=404, detail="Account not found")

        current_balance = row[0]
        if current_balance < amount:
            raise HTTPException(status_code=400, detail="Insufficient balance")

        new_balance = current_balance - amount
        cursor.execute("UPDATE accounts SET balance = ? WHERE account_id = ?", (new_balance, account_id))
        conn.commit()
        return {"message": "Debit successful", "new_balance": new_balance}

    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=500, detail=str(e))